// Code generated by protoc-gen-go. DO NOT EDIT.
// source: test.proto

package testmsg

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 集群处于稳定
// 控制台根据玩家id，通过与gameser一样的一致性哈希算法,直接命中节点，并向节点发送消息，让节点在本地执行
// 必须保证senderId与targetId一定在本地节点上
type LocalRun struct {
	ReqId                uint64   `protobuf:"varint,1,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	SenderId             int64    `protobuf:"varint,2,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	TargetId             int64    `protobuf:"varint,3,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	Content              string   `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LocalRun) Reset()         { *m = LocalRun{} }
func (m *LocalRun) String() string { return proto.CompactTextString(m) }
func (*LocalRun) ProtoMessage()    {}
func (*LocalRun) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{0}
}

func (m *LocalRun) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LocalRun.Unmarshal(m, b)
}
func (m *LocalRun) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LocalRun.Marshal(b, m, deterministic)
}
func (m *LocalRun) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocalRun.Merge(m, src)
}
func (m *LocalRun) XXX_Size() int {
	return xxx_messageInfo_LocalRun.Size(m)
}
func (m *LocalRun) XXX_DiscardUnknown() {
	xxx_messageInfo_LocalRun.DiscardUnknown(m)
}

var xxx_messageInfo_LocalRun proto.InternalMessageInfo

func (m *LocalRun) GetReqId() uint64 {
	if m != nil {
		return m.ReqId
	}
	return 0
}

func (m *LocalRun) GetSenderId() int64 {
	if m != nil {
		return m.SenderId
	}
	return 0
}

func (m *LocalRun) GetTargetId() int64 {
	if m != nil {
		return m.TargetId
	}
	return 0
}

func (m *LocalRun) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type LocalRunResponse struct {
	ReplyId              uint64   `protobuf:"varint,1,opt,name=reply_id,json=replyId,proto3" json:"reply_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LocalRunResponse) Reset()         { *m = LocalRunResponse{} }
func (m *LocalRunResponse) String() string { return proto.CompactTextString(m) }
func (*LocalRunResponse) ProtoMessage()    {}
func (*LocalRunResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{1}
}

func (m *LocalRunResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LocalRunResponse.Unmarshal(m, b)
}
func (m *LocalRunResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LocalRunResponse.Marshal(b, m, deterministic)
}
func (m *LocalRunResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocalRunResponse.Merge(m, src)
}
func (m *LocalRunResponse) XXX_Size() int {
	return xxx_messageInfo_LocalRunResponse.Size(m)
}
func (m *LocalRunResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LocalRunResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LocalRunResponse proto.InternalMessageInfo

func (m *LocalRunResponse) GetReplyId() uint64 {
	if m != nil {
		return m.ReplyId
	}
	return 0
}

// 集群处于不稳定状态
// 控制台拿到node_key所代表的节点
// 1.确保node_key在集群中是running状态
// 2.确保集群当前一定是超过1个以上的节点，并且有一个节点是处于Pending状态下
type LocalRunPending struct {
	ReqId                uint64   `protobuf:"varint,1,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	SenderId             int64    `protobuf:"varint,2,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	TargetId             int64    `protobuf:"varint,3,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	NodeKey              string   `protobuf:"bytes,4,opt,name=node_key,json=nodeKey,proto3" json:"node_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LocalRunPending) Reset()         { *m = LocalRunPending{} }
func (m *LocalRunPending) String() string { return proto.CompactTextString(m) }
func (*LocalRunPending) ProtoMessage()    {}
func (*LocalRunPending) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{2}
}

func (m *LocalRunPending) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LocalRunPending.Unmarshal(m, b)
}
func (m *LocalRunPending) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LocalRunPending.Marshal(b, m, deterministic)
}
func (m *LocalRunPending) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocalRunPending.Merge(m, src)
}
func (m *LocalRunPending) XXX_Size() int {
	return xxx_messageInfo_LocalRunPending.Size(m)
}
func (m *LocalRunPending) XXX_DiscardUnknown() {
	xxx_messageInfo_LocalRunPending.DiscardUnknown(m)
}

var xxx_messageInfo_LocalRunPending proto.InternalMessageInfo

func (m *LocalRunPending) GetReqId() uint64 {
	if m != nil {
		return m.ReqId
	}
	return 0
}

func (m *LocalRunPending) GetSenderId() int64 {
	if m != nil {
		return m.SenderId
	}
	return 0
}

func (m *LocalRunPending) GetTargetId() int64 {
	if m != nil {
		return m.TargetId
	}
	return 0
}

func (m *LocalRunPending) GetNodeKey() string {
	if m != nil {
		return m.NodeKey
	}
	return ""
}

type RunMsg struct {
	ReqId                uint64   `protobuf:"varint,1,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	TargetId             int64    `protobuf:"varint,2,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	NodeKeys             string   `protobuf:"bytes,3,opt,name=node_keys,json=nodeKeys,proto3" json:"node_keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunMsg) Reset()         { *m = RunMsg{} }
func (m *RunMsg) String() string { return proto.CompactTextString(m) }
func (*RunMsg) ProtoMessage()    {}
func (*RunMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{3}
}

func (m *RunMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunMsg.Unmarshal(m, b)
}
func (m *RunMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunMsg.Marshal(b, m, deterministic)
}
func (m *RunMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunMsg.Merge(m, src)
}
func (m *RunMsg) XXX_Size() int {
	return xxx_messageInfo_RunMsg.Size(m)
}
func (m *RunMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_RunMsg.DiscardUnknown(m)
}

var xxx_messageInfo_RunMsg proto.InternalMessageInfo

func (m *RunMsg) GetReqId() uint64 {
	if m != nil {
		return m.ReqId
	}
	return 0
}

func (m *RunMsg) GetTargetId() int64 {
	if m != nil {
		return m.TargetId
	}
	return 0
}

func (m *RunMsg) GetNodeKeys() string {
	if m != nil {
		return m.NodeKeys
	}
	return ""
}

type RunMsgResponse struct {
	ReplyId              uint64   `protobuf:"varint,1,opt,name=reply_id,json=replyId,proto3" json:"reply_id,omitempty"`
	TargetId             int64    `protobuf:"varint,2,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	NodeKeys             string   `protobuf:"bytes,3,opt,name=node_keys,json=nodeKeys,proto3" json:"node_keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunMsgResponse) Reset()         { *m = RunMsgResponse{} }
func (m *RunMsgResponse) String() string { return proto.CompactTextString(m) }
func (*RunMsgResponse) ProtoMessage()    {}
func (*RunMsgResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{4}
}

func (m *RunMsgResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunMsgResponse.Unmarshal(m, b)
}
func (m *RunMsgResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunMsgResponse.Marshal(b, m, deterministic)
}
func (m *RunMsgResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunMsgResponse.Merge(m, src)
}
func (m *RunMsgResponse) XXX_Size() int {
	return xxx_messageInfo_RunMsgResponse.Size(m)
}
func (m *RunMsgResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RunMsgResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RunMsgResponse proto.InternalMessageInfo

func (m *RunMsgResponse) GetReplyId() uint64 {
	if m != nil {
		return m.ReplyId
	}
	return 0
}

func (m *RunMsgResponse) GetTargetId() int64 {
	if m != nil {
		return m.TargetId
	}
	return 0
}

func (m *RunMsgResponse) GetNodeKeys() string {
	if m != nil {
		return m.NodeKeys
	}
	return ""
}

func init() {
	proto.RegisterType((*LocalRun)(nil), "testmsg.LocalRun")
	proto.RegisterType((*LocalRunResponse)(nil), "testmsg.LocalRunResponse")
	proto.RegisterType((*LocalRunPending)(nil), "testmsg.LocalRunPending")
	proto.RegisterType((*RunMsg)(nil), "testmsg.RunMsg")
	proto.RegisterType((*RunMsgResponse)(nil), "testmsg.RunMsgResponse")
}

func init() { proto.RegisterFile("test.proto", fileDescriptor_c161fcfdc0c3ff1e) }

var fileDescriptor_c161fcfdc0c3ff1e = []byte{
	// 312 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0x31, 0x4f, 0xfb, 0x30,
	0x10, 0xc5, 0x95, 0xb6, 0xff, 0x36, 0xb9, 0xbf, 0xa0, 0x60, 0x09, 0x48, 0xda, 0x25, 0xca, 0x94,
	0x85, 0x0c, 0x30, 0x31, 0x31, 0x30, 0x45, 0x50, 0x09, 0x59, 0x2c, 0x4c, 0x55, 0xa9, 0x4f, 0x51,
	0x45, 0xb0, 0x13, 0xdb, 0x19, 0x32, 0xf0, 0x3d, 0xf9, 0x38, 0x28, 0x71, 0xdc, 0x48, 0xa9, 0x54,
	0x21, 0xc4, 0x96, 0x7b, 0xef, 0xfc, 0xbb, 0xa7, 0xcb, 0x01, 0x68, 0x54, 0x3a, 0x29, 0xa4, 0xd0,
	0x82, 0xcc, 0x9a, 0xef, 0x0f, 0x95, 0x45, 0x15, 0xb8, 0x4f, 0x62, 0xbb, 0xc9, 0x69, 0xc5, 0xc9,
	0x05, 0x4c, 0x25, 0x96, 0xeb, 0x1d, 0xf3, 0x9d, 0xd0, 0x89, 0x27, 0xf4, 0x9f, 0xc4, 0x32, 0x65,
	0x64, 0x09, 0x9e, 0x42, 0xce, 0x50, 0x36, 0xce, 0x28, 0x74, 0xe2, 0x31, 0x75, 0x8d, 0x60, 0x4c,
	0xbd, 0x91, 0x19, 0xea, 0xc6, 0x1c, 0x1b, 0xd3, 0x08, 0x29, 0x23, 0x3e, 0xcc, 0xb6, 0x82, 0x6b,
	0xe4, 0xda, 0x9f, 0x84, 0x4e, 0xec, 0x51, 0x5b, 0x46, 0xd7, 0x70, 0x66, 0xc7, 0x52, 0x54, 0x85,
	0xe0, 0x0a, 0x49, 0x00, 0xae, 0xc4, 0x22, 0xaf, 0xfb, 0x00, 0xb3, 0xb6, 0x4e, 0x59, 0xf4, 0x09,
	0x73, 0xdb, 0xfe, 0x8c, 0x9c, 0xed, 0x78, 0xf6, 0xf7, 0x61, 0x03, 0x70, 0xb9, 0x60, 0xb8, 0x7e,
	0xc7, 0xda, 0xa6, 0x6d, 0xea, 0x47, 0xac, 0xa3, 0x57, 0x98, 0xd2, 0x8a, 0xaf, 0xd4, 0xb1, 0xa9,
	0x3d, 0x78, 0x34, 0x00, 0x2f, 0xc1, 0xb3, 0x60, 0xd5, 0x4e, 0xf5, 0xa8, 0xdb, 0x91, 0x55, 0x84,
	0x70, 0x6a, 0xd0, 0x3f, 0x58, 0xc3, 0xef, 0xc7, 0xdc, 0x7c, 0x39, 0xf0, 0xff, 0x05, 0x95, 0x7e,
	0x10, 0x5c, 0x89, 0x1c, 0xc9, 0x7d, 0xbf, 0x50, 0x8a, 0x65, 0x85, 0x4a, 0x93, 0xf3, 0xa4, 0xbb,
	0x89, 0xc4, 0x3a, 0x8b, 0xe0, 0x40, 0xda, 0xa7, 0x5c, 0xc1, 0xe5, 0xe0, 0x8f, 0x58, 0x8e, 0x7f,
	0xf0, 0xa8, 0x6b, 0x38, 0x86, 0xbb, 0x83, 0x13, 0xbb, 0x06, 0x43, 0x99, 0xef, 0x7b, 0x8d, 0xbe,
	0xb8, 0x1a, 0x08, 0xf6, 0xe9, 0xdb, 0xb4, 0xbd, 0xe8, 0xdb, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x99, 0xd3, 0xae, 0xe4, 0xdf, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TestConsoleClient is the client API for TestConsole service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TestConsoleClient interface {
	// 控制台发出消息，让节点在本地执行，不需要actor有响应，但控制台消息本身需要有响应
	LocalRunRequest(ctx context.Context, in *LocalRun, opts ...grpc.CallOption) (*LocalRunResponse, error)
	// 控制台发出消息, 节点可能在本地执行，可能转发，不需要actor有响应，但控制台消息本身需要有响应
	LocalRunPendingRequest(ctx context.Context, in *LocalRunPending, opts ...grpc.CallOption) (*LocalRunResponse, error)
	// 发送执行消息，控制台只选择running状态的节点发送，并且每到一站都把当前nodename加入，并在最后一次返回
	RunMsgRequest(ctx context.Context, in *RunMsg, opts ...grpc.CallOption) (*RunMsgResponse, error)
}

type testConsoleClient struct {
	cc *grpc.ClientConn
}

func NewTestConsoleClient(cc *grpc.ClientConn) TestConsoleClient {
	return &testConsoleClient{cc}
}

func (c *testConsoleClient) LocalRunRequest(ctx context.Context, in *LocalRun, opts ...grpc.CallOption) (*LocalRunResponse, error) {
	out := new(LocalRunResponse)
	err := c.cc.Invoke(ctx, "/testmsg.TestConsole/LocalRunRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testConsoleClient) LocalRunPendingRequest(ctx context.Context, in *LocalRunPending, opts ...grpc.CallOption) (*LocalRunResponse, error) {
	out := new(LocalRunResponse)
	err := c.cc.Invoke(ctx, "/testmsg.TestConsole/LocalRunPendingRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testConsoleClient) RunMsgRequest(ctx context.Context, in *RunMsg, opts ...grpc.CallOption) (*RunMsgResponse, error) {
	out := new(RunMsgResponse)
	err := c.cc.Invoke(ctx, "/testmsg.TestConsole/RunMsgRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestConsoleServer is the server API for TestConsole service.
type TestConsoleServer interface {
	// 控制台发出消息，让节点在本地执行，不需要actor有响应，但控制台消息本身需要有响应
	LocalRunRequest(context.Context, *LocalRun) (*LocalRunResponse, error)
	// 控制台发出消息, 节点可能在本地执行，可能转发，不需要actor有响应，但控制台消息本身需要有响应
	LocalRunPendingRequest(context.Context, *LocalRunPending) (*LocalRunResponse, error)
	// 发送执行消息，控制台只选择running状态的节点发送，并且每到一站都把当前nodename加入，并在最后一次返回
	RunMsgRequest(context.Context, *RunMsg) (*RunMsgResponse, error)
}

// UnimplementedTestConsoleServer can be embedded to have forward compatible implementations.
type UnimplementedTestConsoleServer struct {
}

func (*UnimplementedTestConsoleServer) LocalRunRequest(ctx context.Context, req *LocalRun) (*LocalRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LocalRunRequest not implemented")
}
func (*UnimplementedTestConsoleServer) LocalRunPendingRequest(ctx context.Context, req *LocalRunPending) (*LocalRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LocalRunPendingRequest not implemented")
}
func (*UnimplementedTestConsoleServer) RunMsgRequest(ctx context.Context, req *RunMsg) (*RunMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunMsgRequest not implemented")
}

func RegisterTestConsoleServer(s *grpc.Server, srv TestConsoleServer) {
	s.RegisterService(&_TestConsole_serviceDesc, srv)
}

func _TestConsole_LocalRunRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocalRun)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestConsoleServer).LocalRunRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testmsg.TestConsole/LocalRunRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestConsoleServer).LocalRunRequest(ctx, req.(*LocalRun))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestConsole_LocalRunPendingRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocalRunPending)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestConsoleServer).LocalRunPendingRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testmsg.TestConsole/LocalRunPendingRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestConsoleServer).LocalRunPendingRequest(ctx, req.(*LocalRunPending))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestConsole_RunMsgRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestConsoleServer).RunMsgRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testmsg.TestConsole/RunMsgRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestConsoleServer).RunMsgRequest(ctx, req.(*RunMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestConsole_serviceDesc = grpc.ServiceDesc{
	ServiceName: "testmsg.TestConsole",
	HandlerType: (*TestConsoleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LocalRunRequest",
			Handler:    _TestConsole_LocalRunRequest_Handler,
		},
		{
			MethodName: "LocalRunPendingRequest",
			Handler:    _TestConsole_LocalRunPendingRequest_Handler,
		},
		{
			MethodName: "RunMsgRequest",
			Handler:    _TestConsole_RunMsgRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test.proto",
}
